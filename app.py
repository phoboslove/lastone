# ==============================================================================
#           –§–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï v7.0 (–ü–û–õ–ù–´–ô –ö–û–î. –í–°–ï –í–ö–õ–Æ–ß–ï–ù–û.)
# ==============================================================================

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import warnings

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from mlxtend.frequent_patterns import apriori, association_rules
    from adjustText import adjust_text
except ImportError:
    st.error("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (mlxtend, adjustText) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª requirements.txt.")
    st.stop()

# --- 1. –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ ---
st.set_page_config(page_title="–ë–∏–∑–Ω–µ—Å-–ê–Ω–∞–ª–∏—Ç–∏–∫", page_icon="üìà", layout="wide")
warnings.filterwarnings('ignore')

# –°–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Streamlit
hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)


# --- 2. –°–£–ü–ï–†-–ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ê–†–û–õ–ï–ô ---
def check_password():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å."""

    def password_entered():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º."""
        # –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ "—Å–µ–∫—Ä–µ—Ç–∞—Ö" Streamlit
        if "password" in st.secrets and st.session_state["password"] == st.secrets["password"]:
            st.session_state["password_correct"] = True
            del st.session_state["password"] 
        else:
            st.session_state["password_correct"] = False

    if st.session_state.get("password_correct", False):
        return True

    st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:", type="password", on_change=password_entered, key="password"
    )
    
    if "password_correct" in st.session_state and not st.session_state["password_correct"] and st.session_state["password"] != '':
        st.error("üòï –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π.")
    
    return st.session_state.get("password_correct", False)

# --- 3. –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
st.title("üë®‚Äçüíª AI –ë–∏–∑–Ω–µ—Å-–ê–Ω–∞–ª–∏—Ç–∏–∫")

if check_password():
    # –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    st.sidebar.success("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    
    st.header("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏...", type=['csv', 'xlsx'], label_visibility="collapsed")
    
    if uploaded_file is not None:
        with st.spinner('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...'):
            try:
                # --- –ß–¢–ï–ù–ò–ï –ò –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• ---
                if uploaded_file.name.endswith('.csv'):
                    df = pd.read_csv(uploaded_file)
                else:
                    df = pd.read_excel(uploaded_file, engine='openpyxl')
                
                required_columns = ['OrderID', 'OrderDate', 'Dish', 'Price']
                if not all(col in df.columns for col in required_columns):
                    st.error(f"–û—à–∏–±–∫–∞: –í –≤–∞—à–µ–º —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å: {', '.join(required_columns)}")
                    st.stop()
                    
                df['OrderDate'] = pd.to_datetime(df['OrderDate'], errors='coerce').dt.date
                st.success(f"‚úîÔ∏è –§–∞–π–ª '{uploaded_file.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫.")
                
                with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
                    st.dataframe(df.head())

                # --- –û–°–ù–û–í–ù–´–ï KPI ---
                st.header("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±–∏–∑–Ω–µ—Å–∞ üìä")
                total_revenue = df['Price'].sum()
                number_of_orders = df['OrderID'].nunique()
                average_check = total_revenue / number_of_orders if number_of_orders > 0 else 0
                
                kpi_cols = st.columns(3)
                kpi_cols[0].metric("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{total_revenue:,.0f} —Ç–≥".replace(',', ' '))
                kpi_cols[1].metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", f"{number_of_orders}")
                kpi_cols[2].metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{average_check:,.0f} —Ç–≥".replace(',', ' '))
                
                # --- –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–û–í (–° –ì–†–ê–§–ò–ö–û–ú) ---
                if 'ClientID' in df.columns:
                    st.header("–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º üèÜ")
                    customer_spending = df.groupby('ClientID')['Price'].sum().sort_values(ascending=False)
                    st.write("–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—É–º–º–µ —Ç—Ä–∞—Ç:")
                    st.dataframe(customer_spending.head(10))
                    
                    st.write("–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–∞—Ç –ø–æ —Ç–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–∞–º:")
                    fig_clients, ax_clients = plt.subplots(figsize=(12, 7))
                    customer_spending.head(10).plot(kind='bar', ax=ax_clients, color='royalblue', legend=None)
                    ax_clients.set_ylabel('–°—É–º–º–∞ —Ç—Ä–∞—Ç (—Ç–µ–Ω–≥–µ)')
                    ax_clients.set_xlabel('ID –ö–ª–∏–µ–Ω—Ç–∞')
                    plt.xticks(rotation=45)
                    st.pyplot(fig_clients)

                # --- –ê–ù–ê–õ–ò–ó –ü–û –í–†–ï–ú–ï–ù–ò ---
                st.header("–ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ üïí")
                daily_sales = df.groupby(df['OrderDate'])['Price'].sum()
                st.write("–î–∏–Ω–∞–º–∏–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ø–æ –¥–Ω—è–º:")
                st.line_chart(daily_sales)

                # --- –ú–ï–ù–Æ-–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì ---
                st.header("–ú–∞—Ç—Ä–∏—Ü–∞ –ú–µ–Ω—é-–ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞ üçΩÔ∏è")
                menu_analysis = df.groupby('Dish').agg(Popularity=('Dish', 'count'), Revenue=('Price', 'sum'))
                avg_popularity = menu_analysis['Popularity'].mean()
                avg_revenue = menu_analysis['Revenue'].mean()
                
                fig_menu, ax_menu = plt.subplots(figsize=(14, 10))
                ax_menu.scatter(menu_analysis['Popularity'], menu_analysis['Revenue'], s=120, color='royalblue', alpha=0.6)
                texts = [ax_menu.text(row['Popularity'], row['Revenue'], index, fontsize=10) for index, row in menu_analysis.iterrows()]
                adjust_text(texts, ax=ax_menu, arrowprops=dict(arrowstyle='->', color='black', lw=0.5))
                ax_menu.axvline(x=avg_popularity, color='r', linestyle='--')
                ax_menu.axhline(y=avg_revenue, color='r', linestyle='--')
                ax_menu.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –ú–µ–Ω—é-–ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞', fontsize=16)
                ax_menu.set_xlabel('–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂)')
                ax_menu.set_ylabel('–í—ã—Ä—É—á–∫–∞ (—Ç–µ–Ω–≥–µ)')
                ax_menu.grid(True)
                st.pyplot(fig_menu)

                # --- –ê–ù–ê–õ–ò–ó "–ò–î–ï–ê–õ–¨–ù–´–• –ü–ê–†" ---
                st.header("–ê–Ω–∞–ª–∏–∑ '–ò–¥–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä' üß∫")
                basket = (df.groupby(['OrderID', 'Dish'])['OrderID'].count().unstack().reset_index().fillna(0).set_index('OrderID'))
                def encode_units(x): return 1 if x >= 1 else 0
                basket_sets = basket.apply(lambda col: col.map(encode_units))
                
                if basket_sets.shape[1] > 0 and not basket_sets.sum(axis=1).max() < 2:
                    frequent_itemsets = apriori(basket_sets, min_support=0.01, use_colnames=True)
                    if not frequent_itemsets.empty:
                        rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1)
                        if not rules.empty:
                            st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ '–ï—Å–ª–∏... —Ç–æ...':")
                            st.dataframe(rules.sort_values(by=['lift', 'confidence'], ascending=False)[['antecedents', 'consequents', 'support', 'confidence', 'lift']].head(10))

            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞. –û—à–∏–±–∫–∞: {e}")
